from matplotlib import pyplot
from PIL import Image
from numpy import asarray
from mtcnn.mtcnn import MTCNN
from PIL import Image
from pathlib import Path
import os


import os

# I copied this function from above and made a small change in the last line
# so it returns the image instead of the array of pixels
def extract_face2(filename, required_size=(224, 224)):
    # load image from file
    pixels = pyplot.imread(filename)
    # create the detector, using default weights
    detector = MTCNN()
    # detect faces in the image
    results = detector.detect_faces(pixels)
    # extract the bounding box from the first face
    x1, y1, width, height = results[0]['box']
    x2, y2 = x1 + width, y1 + height
    # extract the face
    face = pixels[y1:y2, x1:x2]
    # resize pixels to the model size
    image = Image.fromarray(face)
    image = image.resize(required_size)
    return image

# Do not call this directly
# this function will convert images found in the archive directory into jpg images
# and will save them in a corresponding "target" + path folder with the same 
# directory structure.
def convert_to_jpg(path):
    if path.endswith(".png"):
        image = Image.open("./" + path)
        image.save('./target' + path[: -4] + ".jpg")
    else:
        for f in os.listdir("./" + path):
            if not f.endswith('.DS_Store'):
                if not f.endswith(".png"):
                    os.mkdir("./target" + path + "/" + f)
                convert_to_jpg(path + "/" + f)


# Do not call this directly
# this function will crop images found in the path directory
# and will save them in a corresponding "crop" + path folder with the same 
# directory structure.
def crop_image(path):
    if path.endswith(".jpg"):
        image = extract_face2("./" + path)
        image.save('./crop' + path)
    else:
        for f in os.listdir("./" + path):
            if not f.endswith('.DS_Store'):
                if not f.endswith(".jpg"):
                    os.mkdir("./crop" + path + "/" + f)
                crop_image(path + "/" + f)


# call this function with string parameter "Images" (name of the root folder containing the images) and it will create
# a "targetImages" folder that will contain the jpg images and a "croptargetImages"
# folder that will contain the cropped jpg images. It will do so by calling the other two functions.
# note that both these new folders will preserve the structure of the original Images folder.
# Note** this function assumes it is being called from the same directory as the parameter folder name.
def combine(path):
    os.mkdir('./target' + path)
    os.mkdir('./croptarget' + path)

    convert_to_jpg(path)
    crop_image('target' + path)

path = 'Sample'

combine(path)


